{"ast":null,"code":"var _jsxFileName = \"/Users/dimashkabura/Desktop/code/kardia-info/src/Game.js\";\nimport React, { Component } from \"react\";\nimport getWeb3 from \"./components/getWeb3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      InfoBal: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts();\n        const minABI = [// balanceOf\n        {\n          constant: true,\n          inputs: [{\n            name: \"_owner\",\n            type: \"address\"\n          }],\n          name: \"balanceOf\",\n          outputs: [{\n            name: \"balance\",\n            type: \"uint256\"\n          }],\n          type: \"function\"\n        }];\n        const tokenAddress = \"0xc20574d56c2232e416C8c4c09A41F7F4141E35eC\";\n        const contract = new web3.eth.Contract(minABI, tokenAddress);\n        var InfoBal = await getBalance();\n\n        async function getBalance() {\n          const result = await contract.methods.balanceOf(accounts[0]).call();\n          const format = web3.utils.fromWei(result);\n          return format;\n        }\n\n        this.setState({\n          web3,\n          accounts,\n          InfoBal\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const {\n        accounts,\n        contract\n      } = this.state; // Stores a given value, 5 by default.\n      // Get the value from the contract to prove it worked.\n      // Update state with the result.\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Web3, accounts, and contract...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cont\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"top\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"l\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"circle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this), this.state.accounts]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"r p-l-25 p-t-14 p-b-14\",\n            children: this.state.InfoBal.toFixed(2) + \"INFO\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/dimashkabura/Desktop/code/kardia-info/src/Game.js"],"names":["React","Component","getWeb3","Game","state","storageValue","web3","accounts","InfoBal","componentDidMount","eth","getAccounts","minABI","constant","inputs","name","type","outputs","tokenAddress","contract","Contract","getBalance","result","methods","balanceOf","call","format","utils","fromWei","setState","runExample","error","alert","console","render","toFixed"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport getWeb3 from \"./components/getWeb3\";\n\n\nclass Game extends Component {\n    state = {\n        storageValue: 0,\n        web3: null,\n        accounts: null,\n        InfoBal:null\n    };\n\n    componentDidMount = async () => {\n        try {\n            // Get network provider and web3 instance.\n            const web3 = await getWeb3();\n\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts();\n\n            const minABI = [\n                // balanceOf\n                {\n                    constant: true,\n                    inputs: [{ name: \"_owner\", type: \"address\" }],\n                    name: \"balanceOf\",\n                    outputs: [{ name: \"balance\", type: \"uint256\" }],\n                    type: \"function\",\n                },\n            ];\n            const tokenAddress = \"0xc20574d56c2232e416C8c4c09A41F7F4141E35eC\";\n\n            const contract = new web3.eth.Contract(minABI, tokenAddress);\n\n            var InfoBal = await getBalance();\n\n            async function getBalance() {\n                const result = await contract.methods.balanceOf(accounts[0]).call();\n\n                const format = web3.utils.fromWei(result);\n\n                return(format)\n            }\n\n            \n            this.setState({ web3, accounts, InfoBal}, this.runExample);\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`,\n            );\n            console.error(error);\n        }\n    };\n\n    runExample = async () => {\n        const { accounts, contract } = this.state;\n\n        // Stores a given value, 5 by default.\n\n        // Get the value from the contract to prove it worked.\n\n        // Update state with the result.\n    };\n    render() {\n        if (!this.state.web3) {\n            return <div>Loading Web3, accounts, and contract...</div>;\n        }\n        return (\n            <div className=\"Game\">\n                <div className=\"cont\">\n                    <div className=\"top\">\n                        <div className=\"l\">\n                            <div className=\"circle\"></div>\n                            {this.state.accounts}\n                        </div>\n                        <div className=\"r p-l-25 p-t-14 p-b-14\">\n                            {(this.state.InfoBal).toFixed(2) + \"INFO\"}\n                        </div>\n                    </div>\n                    <div className=\"bottom\">\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}