{"ast":null,"code":"var _jsxFileName = \"/Users/dimashkabura/Desktop/kardia-info/src/components/subcomponents/Bigchart.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Smallchart(props) {\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: {\n      labels: range(props.now, props.time, props.histData.length - 1),\n      datasets: [{\n        backgroundColor: props.col,\n        borderColor: props.col,\n        data: props.histData,\n        fill: props.col,\n        lineTension: 0,\n        pointRadius: 0,\n        borderWidth: 3,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'red'\n      }]\n    },\n    options: {\n      scales: {\n        x: {\n          grid: {\n            display: false,\n            drawBorder: false\n          },\n          ticks: {\n            maxTicksLimit: 6,\n            autoSkip: true,\n            maxRotation: 0,\n            minRotation: 0\n          },\n          type: \"time\"\n        },\n        y: {\n          grid: {\n            drawBorder: false,\n            precision: 1,\n            color: \"#f0f0f0\"\n          },\n          ticks: {\n            callback: function (value, index, values) {\n              return \"$\" + value.toPrecision(3);\n            },\n            maxTicksLimit: 6,\n            padding: 10\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          display: false\n        },\n        tooltip: {\n          mode: 'index',\n          intersect: false\n        }\n      },\n      elements: {\n        point: {\n          hoverRadius: 4,\n          hoverBorderWidth: 1,\n          pointStyle: \"circle\"\n        }\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n_c = Smallchart;\n\nfunction range(now, time, length) {\n  var arr = [now * 1000];\n  var timearr = [];\n\n  for (let i = 0; i < length; i++) {\n    var n = arr[0] - time * 1000;\n    arr.unshift(round(n, time * 1000));\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    timearr.push(new Date(arr[i]));\n  }\n\n  return timearr;\n}\n\nfunction round(num, time) {\n  return Math.ceil(num / time) * time;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Smallchart\");","map":{"version":3,"sources":["/Users/dimashkabura/Desktop/kardia-info/src/components/subcomponents/Bigchart.js"],"names":["React","Line","Smallchart","props","labels","range","now","time","histData","length","datasets","backgroundColor","col","borderColor","data","fill","lineTension","pointRadius","borderWidth","pointHoverRadius","pointHoverBackgroundColor","scales","x","grid","display","drawBorder","ticks","maxTicksLimit","autoSkip","maxRotation","minRotation","type","y","precision","color","callback","value","index","values","toPrecision","padding","plugins","legend","tooltip","mode","intersect","elements","point","hoverRadius","hoverBorderWidth","pointStyle","arr","timearr","i","n","unshift","round","push","Date","num","Math","ceil"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Line } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\n\nexport default function Smallchart(props) {\n    return (\n        <Line\n            data={{\n                labels: range(props.now, props.time, props.histData.length - 1),\n                datasets: [{\n                    backgroundColor: props.col,\n                    borderColor: props.col,\n                    data: props.histData,\n                    fill: props.col,\n                    lineTension: 0,\n                    pointRadius: 0,\n                    borderWidth: 3,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'red'\n                }\n                ],\n            }}\n            options={{\n                scales: {\n                    x: {\n                        grid: {\n                            display: false,\n                            drawBorder: false,\n                        },\n                        ticks: {\n                            maxTicksLimit: 6,\n                            autoSkip: true,\n                            maxRotation: 0,\n                            minRotation: 0,\n                        },\n                        type: \"time\"\n                    },\n                    y:\n                    {\n                        grid: {\n                            drawBorder: false,\n                            precision: 1,\n                            color:\"#f0f0f0\"\n                        },\n                        ticks: {\n                            callback: function (value, index, values) {\n                                return (\"$\" + value.toPrecision(3))\n                            },\n                            maxTicksLimit: 6,\n                            padding: 10\n                        }\n                    }\n                },\n                plugins: {\n                    legend: {\n                        display: false\n                    },\n                    tooltip: {\n                        mode: 'index',\n                        intersect: false\n                    }\n                },\n                elements:{\n                    point:{\n                        hoverRadius:4,\n                        hoverBorderWidth:1,\n                        pointStyle:\"circle\"\n                    }\n                }\n            }}\n\n        />\n    )\n}\n\nfunction range(now, time, length) {\n    var arr = [now * 1000]\n    var timearr = []\n    for (let i = 0; i < length; i++) {\n        var n = arr[0] - (time * 1000)\n        arr.unshift(round(n, (time * 1000)))\n    }\n    for (let i = 0; i < arr.length; i++) {\n\n        timearr.push(new Date(arr[i]))\n    }\n    return (timearr)\n}\n\nfunction round(num, time) {\n    return Math.ceil(num / time) * time;\n}"]},"metadata":{},"sourceType":"module"}