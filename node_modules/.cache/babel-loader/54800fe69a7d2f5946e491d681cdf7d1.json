{"ast":null,"code":"var _jsxFileName = \"/Users/dimashkabura/Desktop/kardia-info/src/components/Walletdash.js\";\nimport { renderIcon } from 'blockies';\nimport React from 'react';\nimport Loader from './Loader';\nimport { createCanvas } from 'canvas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Tokens extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      wallet: props.match.params.id,\n      kaibal: 0,\n      tokens: [],\n      tokensbal: [],\n      icon: \"\"\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([fetch('https://api.kardiainfo.com/tokens').then(res => res.json()), fetch(`https://backend.kardiachain.io/api/v1/addresses/${this.state.wallet}/tokens`).then(res => res.json()), fetch(`https://backend.kardiachain.io/api/v1/addresses/${this.state.wallet}`).then(res => res.json())]).then(([urlData, url2Data, url3Data]) => {\n      document.title = `${this.state.wallet} - Kardia info`;\n      const canvas = createCanvas(50, 50);\n      var icon = renderIcon({\n        // All options are optional\n        seed: 'randstring',\n        // seed used to generate icon data, default: random\n        color: '#dfe',\n        // to manually specify the icon color, default: random\n        bgcolor: '#aaa',\n        // choose a different background color, default: white\n        size: 15,\n        // width/height of the icon in blocks, default: 10\n        scale: 3 // width/height of each block in pixels, default: 5\n\n      }, canvas);\n      this.setState({\n        isLoaded: true,\n        tokens: urlData.tokens,\n        tokensbal: url2Data.data.data,\n        kaibal: parseFloat(url3Data.data.balance),\n        icon: icon\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    console.log(this.state.kaibal);\n    console.log(this.state.tokensbal);\n    console.log(this.state.tokens);\n    const {\n      error,\n      isLoaded\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 20\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.icon, \"know wallet - \", this.state.wallet]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/dimashkabura/Desktop/kardia-info/src/components/Walletdash.js"],"names":["renderIcon","React","Loader","createCanvas","Tokens","Component","constructor","props","state","error","isLoaded","wallet","match","params","id","kaibal","tokens","tokensbal","icon","componentDidMount","Promise","all","fetch","then","res","json","urlData","url2Data","url3Data","document","title","canvas","seed","color","bgcolor","size","scale","setState","data","parseFloat","balance","render","console","log","message"],"mappings":"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","sourcesContent":["import { renderIcon } from 'blockies';\nimport React from 'react';\nimport Loader from './Loader';\nimport { createCanvas } from 'canvas';\n\nexport default class Tokens extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            wallet: props.match.params.id,\n            kaibal: 0,\n            tokens: [],\n            tokensbal: [],\n            icon: \"\"\n        };\n    }\n\n\n    componentDidMount() {\n        Promise.all([\n            fetch('https://api.kardiainfo.com/tokens').then(res => res.json()),\n            fetch(`https://backend.kardiachain.io/api/v1/addresses/${this.state.wallet}/tokens`).then(res => res.json()),\n            fetch(`https://backend.kardiachain.io/api/v1/addresses/${this.state.wallet}`).then(res => res.json())\n        ]).then(([urlData, url2Data, url3Data]) => {\n            document.title = `${this.state.wallet} - Kardia info`;\n            const canvas = createCanvas(50, 50);\n\n            var icon = renderIcon(\n                { // All options are optional\n                    seed: 'randstring', // seed used to generate icon data, default: random\n                    color: '#dfe', // to manually specify the icon color, default: random\n                    bgcolor: '#aaa', // choose a different background color, default: white\n                    size: 15, // width/height of the icon in blocks, default: 10\n                    scale: 3 // width/height of each block in pixels, default: 5\n                },\n                canvas\n            );\n            this.setState({\n                isLoaded: true,\n                tokens: urlData.tokens,\n                tokensbal: url2Data.data.data,\n                kaibal: parseFloat(url3Data.data.balance),\n                icon:icon\n            });\n        },\n            (error) => {\n                this.setState({\n                    isLoaded: true,\n                    error\n                });\n            }\n        )\n    }\n\n    render() {\n        console.log(this.state.kaibal);\n        console.log(this.state.tokensbal);\n        console.log(this.state.tokens);\n        const { error, isLoaded } = this.state;\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        }\n        else if (!isLoaded) {\n            return <Loader />;\n        }\n        else {\n            return (\n                <div>\n                    {this.state.icon}\n                    know wallet - {this.state.wallet}\n                </div>\n            )\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}